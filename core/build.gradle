apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.kotlin.plugin.compose'


apply plugin: "androidx.navigation.safeargs.kotlin"

def keystoreProperties = new Properties()
if (new File("keystore.properties").exists()) {
    keystoreProperties.load(new FileInputStream(rootProject.file("keystore.properties")))
} else {
    keystoreProperties.load(new FileInputStream(rootProject.file("fakekeystore.properties")))
}

android {
    namespace "net.ivpn.core"
    
    signingConfigs {
        release {
            keyAlias keystoreProperties['release.key.alias']
            keyPassword keystoreProperties['release.key.password']
            storeFile file(keystoreProperties['release.store.file'])
            storePassword keystoreProperties['release.store.password']
            v1SigningEnabled false
            v2SigningEnabled true
        }
    }

    compileSdkVersion 35
    defaultConfig {
        minSdkVersion 25
        targetSdkVersion 34
        versionCode 137
        versionName "2.10.12"
        ndkVersion "25.1.8937393"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'

        vectorDrawables.useSupportLibrary = true

        buildConfigField 'boolean', 'openvpn3', 'false'
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_TOOLCHAIN=clang',
                        '-DANDROID_STL=c++_static',
                        '-DANDROID_LD=deprecated',
                        "-DGRADLE_USER_HOME=${project.gradle.gradleUserHomeDir}"
            }

            ndk {
                abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            }
        }

        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
    lintOptions {
        checkReleaseBuilds false
    }

    sourceSets {
        main {
            jniLibs.srcDir 'libs'
            assets.srcDirs = ["src/main/assets", "build/ovpnassets"]
        }
    }

    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }
    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests.returnDefaultValues = true
    }
    externalNativeBuild {
        cmake {
            version '3.22.1'
            path 'CMakeLists.txt'
        }
    }

    splits {
        abi {
            reset()
            include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
            universalApk true
        }
    }

    packaging {
        jniLibs {
            useLegacyPackaging = true
        }
    }
    buildFeatures {
        viewBinding true
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
}

def File registerGenTask(variantName, variantDirName) {
    def baseDir = new File(buildDir, "generated/source/ovpn3swig/${variantDirName}")
    def genDir = new File(baseDir, "net/openvpn/ovpn3")
    task("generateOpenVPN3Swig${variantName}", type: Exec) {

        def swigcmd = "swig"
        if (file("/opt/homebrew/bin/swig").exists())
            swigcmd = "/opt/homebrew/bin/swig"
        else if (file("/usr/local/bin/swig").exists())
            swigcmd = "/usr/local/bin/swig"


        doFirst {
            mkdir genDir
        }

        commandLine swigcmd, "-outdir", genDir, "-outcurrentdir", "-c++", "-java", "-package", "net.openvpn.ovpn3",
                "-Isrc/main/cpp/openvpn3/client", "-Isrc/main/cpp/openvpn3/",
                "-o", "${genDir}/ovpncli_wrap.cxx", "-oh", "${genDir}/ovpncli_wrap.h",
                "src/main/cpp/openvpn3/javacli/ovpncli.i"
    }

    return baseDir
}

def kemScript = "./../liboqs-android/jni/liboqs/scripts/build-android.sh"
def kemPlatform = "android-21"
def kemMechanisms = "KEM_kyber_1024;"

tasks.register("buildLiboqsARM64", Exec) {
    commandLine kemScript, android.ndkDirectory, "-a", "arm64-v8a", "-p", kemPlatform, "-m", kemMechanisms
}

tasks.register("buildLiboqsARM", Exec) {
    commandLine kemScript, android.ndkDirectory, "-a", "armeabi-v7a", "-p", kemPlatform, "-m", kemMechanisms
}

tasks.register("buildLiboqsX8664", Exec) {
    commandLine kemScript, android.ndkDirectory, "-a", "x86_64", "-p", kemPlatform, "-m", kemMechanisms
}

tasks.register("buildLiboqsX86", Exec) {
    commandLine kemScript, android.ndkDirectory, "-a", "x86", "-p", kemPlatform, "-m", kemMechanisms
}

android.libraryVariants.configureEach { variant ->
    def sourceDir = registerGenTask(variant.name, variant.baseName.replace("-", "/"))
    def generateOpenVPN3Swig = tasks.named("generateOpenVPN3Swig${variant.name}").get()
    def buildLiboqsARM64 = tasks.named("buildLiboqsARM64").get()
    def buildLiboqsARM = tasks.named("buildLiboqsARM").get()
    def buildLiboqsX8664 = tasks.named("buildLiboqsX8664").get()
    def buildLiboqsX86 = tasks.named("buildLiboqsX86").get()
    variant.registerJavaGeneratingTask(generateOpenVPN3Swig, sourceDir)
    variant.registerJavaGeneratingTask(buildLiboqsARM64, sourceDir)
    variant.registerJavaGeneratingTask(buildLiboqsARM, sourceDir)
    variant.registerJavaGeneratingTask(buildLiboqsX8664, sourceDir)
    variant.registerJavaGeneratingTask(buildLiboqsX86, sourceDir)
}

project.afterEvaluate {
    preBuild.dependsOn(
        tasks.named("buildLiboqsARM64").get(),
        tasks.named("buildLiboqsARM").get(),
        tasks.named("buildLiboqsX8664").get(),
        tasks.named("buildLiboqsX86").get()
    )
}

ext {
    supportLibsVersion = '28.0.0'
    streamsupportVersion = '1.7.2'
}
kapt {
    generateStubs = true
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar','*.aar'])

    // Jetpack Compose
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-graphics:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation "androidx.compose.foundation:foundation:$compose_version"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.9.1'
    implementation 'androidx.activity:activity-compose:1.10.1'
    //Extended Icons
    implementation 'androidx.compose.material:material-icons-extended:1.7.8'

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:3.0.0'

    // JSON Parsing
    implementation 'com.google.code.gson:gson:2.13.1'
    implementation 'com.squareup.retrofit2:converter-gson:3.0.0'

    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'androidx.annotation:annotation:1.9.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation 'com.google.android.material:material:1.12.0'

    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.legacy:legacy-preference-v14:1.0.0'

    // Used to support stream API from JAVA8 and JAVA9
    // ToDo remove it in future
    implementation "net.sourceforge.streamsupport:android-retrofuture:$streamsupportVersion"
    implementation "net.sourceforge.streamsupport:android-retrostreams:$streamsupportVersion"

    // Sliding up panel
    implementation "androidx.coordinatorlayout:coordinatorlayout:1.3.0"

    // Constraint layout
    implementation "androidx.constraintlayout:constraintlayout:2.2.1"

    // QR support
    implementation 'com.google.zxing:core:3.5.3'
    implementation 'com.journeyapps:zxing-android-embedded:4.3.0@aar'

    // Encrypted shared preference
    implementation "androidx.security:security-crypto:1.1.0-beta01"

    // Powerful library for logging
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'org.slf4j:jul-to-slf4j:1.7.36'
    implementation 'com.github.tony19:logback-android:2.0.0'


    // Navigation component
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // LiveData component
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.lifecycleVersion"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutenes"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutenes"

    implementation "junit:junit:$rootProject.ext.junitVersion"

    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"

    testImplementation 'org.powermock:powermock-api-mockito:1.6.2'
    testImplementation 'org.powermock:powermock-module-junit4-rule-agent:1.6.2'
    testImplementation 'org.powermock:powermock-module-junit4-rule:1.6.2'
    testImplementation 'org.powermock:powermock-module-junit4:1.6.2'

    // Dagger
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "com.google.dagger:dagger:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"

    androidTestImplementation 'androidx.test:runner:1.6.2'
    androidTestUtil 'androidx.test:orchestrator:1.5.1'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // liboqs
    implementation project(path: ':liboqs-android')

    implementation "androidx.multidex:multidex:2.0.1"
}

repositories {
    mavenCentral()
}